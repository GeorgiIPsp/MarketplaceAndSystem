@page "/checkout"
@using yyy.Services
@inject IProductService ProductService
@inject OrderServices OrderServices
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserService UserService
@rendermode InteractiveServer
<link href="css/checkout.css" rel="stylesheet" />

<!-- Верхняя панель навигации -->
<nav class="top-nav">
    <div class="nav-container">
        <div class="nav-brand">VALUED</div>
        <ul class="nav-menu" style="margin-left: auto;">
            <li><a href="/" class="nav-link">Главная</a></li>
            <li><a href="/profile" class="nav-link">Профиль</a></li>
            <li><a href="/cart" class="nav-link cart-link">Корзина (@GetCartItemsCount())</a></li>
        </ul>
    </div>
</nav>

<div class="checkout-container">
    @if (!orderCompleted)
    {
        <h1>Оформление заказа</h1>

        <div class="checkout-content">
            <div class="order-items">
                <h2>Ваш заказ</h2>
                @foreach (var cartItem in cartItems)
                {
                    var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
                    if (product != null)
                    {
                        <div class="order-item-card">
                            <img src="@product.ImageUrl" class="product-image" alt="@product.Name" />
                            <div class="product-info">
                                <h3 class="product-name">@product.Name</h3>
                                <p class="product-description">@product.Description</p>
                            </div>
                            <div class="quantity-price">
                                <span class="quantity">@cartItem.quantity шт.</span>
                                <span class="price">@CalculateItemTotal(cartItem) руб.</span>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="order-summary">
                <div class="summary-card">
                    <h3>Итог заказа</h3>
                    <div class="summary-row">
                        <span>Товары (@GetCartItemsCount() шт.)</span>
                        <span>@CalculateSubtotal() руб.</span>
                    </div>
                    <div class="summary-row">
                        <span>Доставка</span>
                        <span>Бесплатно</span>
                    </div>
                    <div class="summary-row total">
                        <span>Итого к оплате</span>
                        <span>@CalculateSubtotal() руб.</span>
                    </div>

                    <div class="delivery-info">
                        <h4>Доставка</h4>
                        <p>@deliveryDate</p>
                    </div>

                    <button class="place-order-btn" @onclick="PlaceOrder" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span>Оформляем заказ...</span>
                        }
                        else
                        {
                            <span>Оформить заказ</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="order-success">
            <div class="success-icon">✓</div>
            <h2>Заказ успешно оформлен!</h2>
            <p>Номер вашего заказа: <strong>#@newOrderId</strong></p>
            <p>Статус: <span class="status-new">Обрабатывается</span></p>
            <p>Мы свяжемся с вами для подтверждения заказа.</p>
            <button class="return-home-btn" @onclick="ReturnToHome">
                Вернуться на главную
            </button>
        </div>
    }
</div>

@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private List<Product> products = new List<Product>();
    private string deliveryDate = "";
    private bool orderCompleted = false;
    private bool isProcessing = false;
    private int newOrderId = 0;
    private Random random = new Random();
    private bool isBuyNowMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCartItems();
        SetDeliveryDate();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task LoadCartItems()
    {
        try
        {
            // Сначала проверяем режим "Купить сейчас"
            var buyNowCart = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "buyNowCart");
            if (!string.IsNullOrEmpty(buyNowCart))
            {
                // Режим быстрой покупки
                cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItem>>(buyNowCart) ?? new List<CartItem>();
                isBuyNowMode = true;
                // Очищаем временную корзину
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "buyNowCart");
            }
            else
            {
                // Обычный режим корзины
                var savedCart = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userCart");
                if (!string.IsNullOrEmpty(savedCart))
                {
                    cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItem>>(savedCart) ?? new List<CartItem>();
                }
                isBuyNowMode = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки корзины: {ex.Message}");
            cartItems = new List<CartItem>();
        }
    }

    private void SetDeliveryDate()
    {
        var daysToAdd = random.Next(1, 3);
        var delivery = DateTime.Now.AddDays(daysToAdd);
        deliveryDate = $"Доставим {delivery:dd.MM.yyyy}";
    }

    private int GetCartItemsCount()
    {
        return cartItems.Sum(ci => ci.quantity);
    }

    private string CalculateItemTotal(CartItem cartItem)
    {
        var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
        if (product != null)
        {
            var price = decimal.Parse(product.Price.Replace("P", ""));
            return (price * cartItem.quantity).ToString("N2");
        }
        return "0";
    }

    private string CalculateSubtotal()
    {
        decimal total = 0;
        foreach (var cartItem in cartItems)
        {
            var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
            if (product != null)
            {
                var price = decimal.Parse(product.Price.Replace("P", ""));
                total += price * cartItem.quantity;
            }
        }
        return total.ToString("N2");
    }

    private async Task PlaceOrder()
    {
        if (cartItems.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Корзина пуста");
            return;
        }

        isProcessing = true;
        StateHasChanged();

        try
        {
            // Используем метод CreateOrder из OrderServices
            var newOrderId = await OrderServices.CreateOrder(
                UserService.currentUser.id,
                cartItems,
                decimal.Parse(CalculateSubtotal())
            );

            if (newOrderId > 0)
            {
                // Очищаем корзину в зависимости от режима
                if (isBuyNowMode)
                {
                    // В режиме "Купить сейчас" просто очищаем временные данные
                    cartItems.Clear();
                }
                else
                {
                    // В обычном режиме очищаем основную корзину
                    cartItems.Clear();
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userCart");
                }

                this.newOrderId = newOrderId;
                orderCompleted = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Ошибка создания заказа");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка оформления заказа: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ReturnToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}