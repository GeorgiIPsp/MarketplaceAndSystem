@page "/cart"
@using Microsoft.Extensions.Logging
@using yyy.Services
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserService UserService
@rendermode InteractiveServer
<link href="css/Cart.css" rel="stylesheet" />


<!-- Верхняя панель навигации -->
<nav class="top-nav">
    <div class="nav-container">
        <div class="nav-brand">VALUED</div>
        <ul class="nav-menu" style="margin-left: auto;">
            <li><a href="/" class="nav-link">Главная</a></li>
            <li><a href="/profile" class="nav-link">Профиль</a></li>
            <li><a href="/cart" class="nav-link cart-link active">Корзина (@GetCartItemsCount())</a></li>
        </ul>
    </div>
</nav>

<!-- Модальное окно подтверждения удаления -->
@if (showDeleteConfirmation)
{
    <div class="modal-overlay" @onclick="CancelDelete">
        <div class="modal-content confirmation-modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Удаление товара</h3>
                <button class="modal-close" @onclick="CancelDelete">×</button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить товар "<strong>@productToDeleteName</strong>" из корзины?</p>
                <div class="confirmation-buttons">
                    <button class="btn btn-cancel" @onclick="CancelDelete">Отмена</button>
                    <button class="btn btn-confirm" @onclick="ConfirmDelete">Удалить</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="cart-container">
    <h1>Корзина</h1>

    @if (cartItems?.Any() == true)
    {
        <div class="cart-content">
            <div class="cart-items">
                @foreach (var cartItem in cartItems)
                {
                    var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
                    if (product != null)
                    {
                        <div class="cart-item-card">
                            <div class="product-info">
                                <img src="@product.ImageUrl" class="product-image" alt="@product.Name" />
                                <div class="product-details">
                                    <h3 class="product-name">@product.Name</h3>
                                    <p class="product-description">@product.Description</p>
                                    <div class="price">@product.Price</div>
                                </div>
                            </div>

                            <div class="quantity-controls">
                                <button class="quantity-btn" @onclick="() => DecreaseQuantity(cartItem)">-</button>
                                <span class="quantity">@cartItem.quantity</span>
                                <button class="quantity-btn" @onclick="() => IncreaseQuantity(cartItem)">+</button>
                                <button class="remove-btn" @onclick="() => ShowDeleteConfirmation(cartItem, product.Name)">🗑️</button>
                            </div>

                            <div class="item-total">
                                @CalculateItemTotal(cartItem) руб.
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="cart-summary">
                <div class="summary-card">
                    <h3>Ваш заказ</h3>
                    <div class="summary-row">
                        <span>Товары (@GetCartItemsCount() шт.)</span>
                        <span>@CalculateSubtotal() руб.</span>
                    </div>
                    <div class="summary-row">
                        <span>Доставка</span>
                        <span>Бесплатно</span>
                    </div>
                    <div class="summary-row total">
                        <span>Итого</span>
                        <span>@CalculateSubtotal() руб.</span>
                    </div>

                    <div class="delivery-info">
                        <h4>Доставка</h4>
                        <p>@deliveryDate</p>
                    </div>

                    <button class="checkout-btn" @onclick="ProceedToCheckout">
                        Перейти к оформлению
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="empty-cart">
            <h2>Корзина пуста</h2>
            <p>Добавьте товары из каталога</p>
            <button class="continue-shopping-btn" @onclick="ContinueShopping">
                Продолжить покупки
            </button>
        </div>
    }
</div>

@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private List<Product> products = new List<Product>();
    private string deliveryDate = "";
    private Random random = new Random();

    // Переменные для подтверждения удаления
    private bool showDeleteConfirmation = false;
    private CartItem cartItemToDelete;
    private string productToDeleteName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadUserCartItems();
        SetDeliveryDate();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task LoadUserCartItems()
    {
        try
        {
            var savedCart = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userCart");
            if (!string.IsNullOrEmpty(savedCart))
            {
                cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItem>>(savedCart) ?? new List<CartItem>();
            }
            else
            {
                cartItems = new List<CartItem>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки корзины: {ex.Message}");
            cartItems = new List<CartItem>();
        }
    }

    private async Task SaveCartToStorage()
    {
        try
        {
            var cartJson = System.Text.Json.JsonSerializer.Serialize(cartItems);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userCart", cartJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка сохранения корзины: {ex.Message}");
        }
    }

    private void SetDeliveryDate()
    {
        var daysToAdd = random.Next(1, 3);
        var delivery = DateTime.Now.AddDays(daysToAdd);
        deliveryDate = $"Доставим {delivery:dd.MM.yyyy}";
    }

    private int GetCartItemsCount()
    {
        return cartItems.Sum(ci => ci.quantity);
    }

    private string CalculateItemTotal(CartItem cartItem)
    {
        var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
        if (product != null)
        {
            var price = decimal.Parse(product.Price.Replace("P", ""));
            return (price * cartItem.quantity).ToString("N2");
        }
        return "0";
    }

    private string CalculateSubtotal()
    {
        decimal total = 0;
        foreach (var cartItem in cartItems)
        {
            var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
            if (product != null)
            {
                var price = decimal.Parse(product.Price.Replace("P", ""));
                total += price * cartItem.quantity;
            }
        }
        return total.ToString("N2");
    }

    private async Task IncreaseQuantity(CartItem cartItem)
    {
        cartItem.quantity++;
        await SaveCartToStorage();
        StateHasChanged();
    }

    private async Task DecreaseQuantity(CartItem cartItem)
    {
        if (cartItem.quantity > 1)
        {
            cartItem.quantity--;
            await SaveCartToStorage();
            StateHasChanged();
        }
        else
        {
            // При уменьшении до 0 показываем подтверждение удаления
            var product = products.FirstOrDefault(p => p.Id == cartItem.product_id);
            if (product != null)
            {
                ShowDeleteConfirmation(cartItem, product.Name);
            }
        }
    }

    // Показать окно подтверждения удаления
    private void ShowDeleteConfirmation(CartItem cartItem, string productName)
    {
        cartItemToDelete = cartItem;
        productToDeleteName = productName;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    // Подтвердить удаление
    private async Task ConfirmDelete()
    {
        if (cartItemToDelete != null)
        {
            cartItems.Remove(cartItemToDelete);
            await SaveCartToStorage();
            await JSRuntime.InvokeVoidAsync("alert", "Товар удален из корзины");
        }

        showDeleteConfirmation = false;
        cartItemToDelete = null;
        productToDeleteName = "";
        StateHasChanged();
    }

    // Отменить удаление
    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        cartItemToDelete = null;
        productToDeleteName = "";
        StateHasChanged();
    }

    private void ProceedToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private void ContinueShopping()
    {
        NavigationManager.NavigateTo("/");
    }
}