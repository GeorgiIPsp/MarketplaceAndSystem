@page "/admin"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using AutomathetionService.Services
@inject AuthService AuthService
@inject EmployeService EmployeService
@rendermode InteractiveServer

<link href="css/admin.css" rel="stylesheet" />

<!-- Верхняя панель навигации -->
<nav class="top-nav">
    <div class="nav-container">
        <div class="nav-brand">REIGN - Админ</div>
        <ul class="nav-menu" style="margin-left: auto;">
            <li><a href="/admin" class="nav-link active">Трудозатратность</a></li>
            <li><a href="/tasksHistory" class="nav-link">История задач</a></li>
            <li><a href="/employees" class="nav-link">Сотрудники</a></li>
            <li><a href="#" class="nav-link" @onclick="Logout">Выйти</a></li>
        </ul>
    </div>
</nav>

@if (isInitialized)
{
    <div class="admin-container">
        <div class="admin-header">
            <h1>Трудозатратность сотрудников</h1>
            <div class="date-info">@currentDate.ToString("dd.MM.yyyy")</div>
        </div>

        <!-- Статистика по дням -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">@currentDate.ToString("dd MMMM")</div>
                <div class="stat-label">Сегодня</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@totalWorkHours часов</div>
                <div class="stat-label">Всего работы</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@completedTasksCount</div>
                <div class="stat-label">Выполнено задач</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@employees.Count</div>
                <div class="stat-label">Всего сотрудников</div>
            </div>
        </div>

        <!-- Таблица сотрудников -->
        <div class="employees-table">
            <div class="table-header">
                <h2>Сотрудники</h2>
            </div>

            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Сотрудник</th>
                            <th>Должность</th>
                            <th>Отработано часов</th>
                            <th>Выполнено задач</th>
                            <th>Норма за день</th>
                            <th>Статус</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in employees)
                        {
                            <tr>
                                <td>
                                    <div class="employee-info">
                                        <div class="employee-name">@employee.Name</div>
                                        <div class="employee-email">@employee.Email</div>
                                    </div>
                                </td>
                                <td>
                                    <span class="role-badge @GetRoleClass(employee.Role)">@GetRoleDisplayName(employee.Role)</span>
                                </td>
                                <td>@employee.WorkedHours часов</td>
                                <td>@employee.CompletedTasks</td>
                                <td>@employee.DailyNorm%</td>
                                <td>
                                    <span class="status-badge @GetStatusClass(employee.DailyNorm)">
                                        @GetStatusText(employee.DailyNorm)
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="admin-container">
        <div class="admin-header">
            <h1>Загрузка...</h1>
        </div>
    </div>
}

@code {
    private List<EmployeeWithStats> employees = new();
    private DateTime currentDate = DateTime.Now;
    private int totalWorkHours = 11;
    private int completedTasksCount = 124;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthentication();
            if (isInitialized)
            {
                LoadEmployees();
                EmployeService.OnEmployeesChanged += OnEmployeesChanged;
            }
        }
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var userRole = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userRole");
            if (userRole != "administrator")
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            isInitialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication error: {ex.Message}");
        }
    }

    private void OnEmployeesChanged()
    {
        LoadEmployees();
        StateHasChanged();
    }

    public void Dispose()
    {
        EmployeService.OnEmployeesChanged -= OnEmployeesChanged;
    }

    private void LoadEmployees()
    {
        var allEmployees = EmployeService.GetAllEmployees();


        employees = allEmployees.Select(e => new EmployeeWithStats
            {
                Id = e.Id,
                Name = e.Name,
                Email = e.Email,
                Role = e.Role,
                WorkedHours = CalculateWorkedHours(e.Id),
                CompletedTasks = CalculateCompletedTasks(e.Id),
                DailyNorm = CalculateDailyNorm(e.Id)
            }).ToList();


        totalWorkHours = employees.Sum(e => e.WorkedHours);
        completedTasksCount = employees.Sum(e => e.CompletedTasks);

        StateHasChanged();
    }

    private int CalculateWorkedHours(int employeeId)
    {
        return new Random().Next(6, 10);
    }

    private int CalculateCompletedTasks(int employeeId)
    {
        return new Random().Next(20, 60);
    }

    private int CalculateDailyNorm(int employeeId)
    {
        return new Random().Next(80, 120);
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "picker" => "Сборщик",
            "sorter" => "Сортировщик",
            "returner" => "Приёмщик возвратов",
            _ => role
        };
    }

    private string GetRoleClass(string role)
    {
        return role switch
        {
            "picker" => "role-picker",
            "sorter" => "role-sorter",
            "returner" => "role-returner",
            _ => ""
        };
    }

    private string GetStatusClass(int dailyNorm)
    {
        if (dailyNorm >= 100) return "status-success";
        if (dailyNorm >= 80) return "status-warning";
        return "status-danger";
    }

    private string GetStatusText(int dailyNorm)
    {
        if (dailyNorm >= 100) return "Выполнено";
        if (dailyNorm >= 80) return "Частично";
        return "Не выполнено";
    }

    private async Task Logout()
    {
        AuthService.Logout();
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userEmail");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userRole");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userName");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isAuthenticated");
        NavigationManager.NavigateTo("/");
    }

    public class EmployeeWithStats
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public int WorkedHours { get; set; }
        public int CompletedTasks { get; set; }
        public int DailyNorm { get; set; }
    }
}